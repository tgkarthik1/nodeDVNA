var express = require('express');
var DVNA = express();

DVNA.get('/', function(req, res) {

// By understanding scope you avoid unwanted changes in the global and parent scopes. Accidentally overwriting a parent variable is a
// common mistake and typically results in unexpected system behavior or an application crash.
'use strict';

function ProtoVulnerableClass() {}

ProtoVulnerableClass.prototype.a = function () {
  console.log("ProtoVulnerableClass.a() invoked!");
};

ProtoVulnerableClass.prototype.b = function () {
  console.log("ProtoVulnerableClass.b() invoked!");
};

var protoCustom = new ProtoVulnerableClass();
protoCustom.a();

var protoCustomOverride = new ProtoVulnerableClass();
protoCustomOverride.__proto__.a = function() {
  console.log("ProtoVulnerableClass.a() overridden!");
};

protoCustomOverride.a();
protoCustom.a();
})

module.exports = {
  title: 'Prototype Inheritance Violation',
  server: DVNA
}
