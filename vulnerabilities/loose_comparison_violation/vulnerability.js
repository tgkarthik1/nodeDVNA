var express = require('express');
var DVNA = express();

DVNA.get('/', function(request, response) {
  Boolean(undefined);
  Boolean(null);

  /**
   * Now with loose comparisons
   */
  false == undefined; // what do you think this is going to return?
  false ==  null;

  /**
   * What happens when you use this kind of logic in a security context?
   * And what if we overlook defining a property on the authorized object but attempt to use it later? (isAuthorized)
   */
  var authorized = {
    user: 'admin'
  };

  function isAuthorized() {
    // We didn't define this in the authorized object as a result it's going to return undefined
    return authorized && authorized.isAuthorized;
  };

  /**
   * This check will fail because undefined is falsy
   */
  if(isAuthorized() == false) {
    console.log('Logged in as administrator');
    return;
  };

  /**
   * This check will pass because 'undefined' is falsy, as a result a user who isn't authorized is able to login.
   */
  if (!isAuthorized()){
    console.log('You\'ve accessed a restricted area.');
  };
});

module.exports = {
  title: 'Loose Comparison Violation',
  server: DVNA
}
